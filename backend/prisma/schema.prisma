// This is your Prisma schema file
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userID       Int      @id @default(autoincrement())
  firstName    String
  middleName   String
  lastName     String
  roleID       Int
  username     String   @unique
  email        String   @unique
  password     String
  phoneNumber  String
  address      String
  birthday     String
  status       Boolean  @default(true)
  image_url    String
  createdByID  Int
  modifiedByID Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // items        Item[]     @relation("UserItems") // Relation to items created by this user
  // inventories   Inventory[] @relation("UserInventories") // Relation to inventories created by this user
}

model Categories {
  categoryID   Int      @id @default(autoincrement())
  categoryCode String   @unique
  categoryName String
  description  String?
  status       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // items         Item[]    @relation("CategoryItems") // Relation to items in this category
}

model Locations {
  locationID   Int      @id @default(autoincrement())
  locationName String
  description  String?
  status       Boolean  @default(true)
  createdByID  Int
  modifiedByID Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // items         Item[]    @relation("LocationItems") // Relation to items in this location
}

model Suppliers {
  supplierID   Int      @id @default(autoincrement())
  supplierName String
  description  String?
  status       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // items         Item[]    @relation("SupplierItems") // Relation to items supplied by this supplier
}

model Items {
  itemID       Int      @id @default(autoincrement())
  itemCode     String   @unique
  categoryID   Int
  barcode      String
  itemName     String
  description  String?
  grams        Float
  uom          String
  price        Float
  cost         Float
  image_url    String?
  createdByID  Int // Creator of this item
  modifiedByID Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  status       Boolean  @default(true)

  // Relations
  // category      Category   @relation("CategoryItems", fields: [categoryID], references: [categoryID])
  // location      Location   @relation("LocationItems", fields: [locationID], references: [locationID])
  // supplier      Supplier   @relation("SupplierItems", fields: [supplierID], references: [supplierID])
  // user          User       @relation("UserItems", fields: [createdByID], references: [userID])
}

model Inventory {
  inventoryID      Int      @id @default(autoincrement())
  locationID       Int
  itemID           Int
  quantity         Int
  inventoryTypeID  Int
  reOrderThreshold String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  // item           Item       @relation(fields: [itemID], references: [itemID])
  // location       Location   @relation(fields: [locationID], references: [locationID])
  // user           User       @relation("UserInventories", fields: [userID], references: [userID])
}

model InventoryType {
  inventoryTypeID Int      @id @default(autoincrement())
  typeName        String
  description     String
  status          Boolean  @default(true)
  createdByID     Int
  modifiedByID    Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // inventories     Inventory[] // Relation to inventories
}

model InventoryAdjustment {
  adjustmentID       Int      @id @default(autoincrement())
  inventoryID        Int
  adjustmentTypeID   Int
  adjustmentReasonID Int
  quantityAdjusted   Int
  status             String
  createdByID        Int
  modifiedByID       Int?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  // inventory          Inventory       @relation(fields: [inventoryID], references: [inventoryID])
  // adjustmentType     AdjustmentType   @relation(fields: [adjustmentTypeID], references: [adjustmentTypeID])
  // adjustmentReason   AdjustmentReason  @relation(fields: [adjustmentReasonID], references: [adjustmentReasonID])
}

model AdjustmentType {
  adjustmentTypeID Int      @id @default(autoincrement())
  typeName         String
  createdByID      Int
  modifiedByID     Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // adjustments        InventoryAdjustment[] // Relation to adjustments
}

model AdjustmentReason {
  adjustmentReasonID Int      @id @default(autoincrement())
  reasonName         String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  createdByID        Int
  modifiedByID       Int?

  // adjustments        InventoryAdjustment[] // Relation to adjustments
}
