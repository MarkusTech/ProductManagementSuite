// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  categoryID   Int      @id @default(autoincrement())
  categoryCode String   @unique
  name         String
  description  String?
  status       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Supplier {
  supplierID    Int      @id @default(autoincrement())
  supplierName  String
  description   String?
  status        Boolean  @default(true)
  createdByID   Int
  modifiedByID  Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Location {
  locationID    Int      @id @default(autoincrement())  // Primary key with auto-increment
  locationName  String                                // Name of the location
  description   String?                               // Optional description of the location
  status        Boolean   @default(true)               // Status of the location (active/inactive)
  createdByID   Int                                    // ID of the user who created this location
  modifiedByID  Int?                                   // ID of the user who last modified this location (optional)
  createdAt     DateTime  @default(now())              // Timestamp for when the location was created
  updatedAt     DateTime  @updatedAt                   // Timestamp for when the location was last updated
}

model Item {
  itemID       Int      @id @default(autoincrement()) // Primary key with auto-increment
  itemCode     String                                 // Unique item code
  categoryID   Int                                    // Foreign key to Category
  locationID   Int                                    // Foreign key to Location
  sku          String                                 // SKU (Stock Keeping Unit) of the item
  barcode      String                                 // Barcode for the item
  itemName     String                                 // Name of the item
  description  String?                                // Optional description of the item
  diff1        String?                                // Optional differentiation field 1
  diff2        String?                                // Optional differentiation field 2
  uom          String                                 // Unit of measure for the item
  price        Float                                  // Price of the item
  cost         Float                                  // Cost of the item
  image_url   String?                                 // Optional path to the image of the item
  createdByID  Int                                    // Foreign key to User (who created the item)
  modifiedByID Int?                                   // Foreign key to User (who last modified the item)
  createdAt    DateTime  @default(now())              // Timestamp when the item was created
  updatedAt    DateTime  @updatedAt                   // Timestamp when the item was last updated

  // Foreign key relations
  // category     Category  @relation(fields: [categoryID], references: [categoryID])
  // location     Location  @relation(fields: [locationID], references: [locationID])
  // createdBy    User      @relation(fields: [createdByID], references: [id])
  // modifiedBy   User?     @relation(fields: [modifiedByID], references: [id])

  @@unique([itemCode]) // Ensures itemCode is unique
}
